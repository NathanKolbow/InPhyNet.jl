```{julia}
include("../pipelines.jl")
@warn "$(Threads.nthreads()) threads in use."
```

## What do NNI moves look like?

```{julia}
using PhyloPlots
idx = 2
_, constraints = loadTrueData("n40h4")
PhyloPlots.plot(constraints[idx])
```

```{julia}
_, cs = loadTrueData("n40h4")
for _=1:4 doRandomNNI!(cs[idx]) end

PhyloPlots.plot(cs[idx])
println(hardwiredClusterDistance(cs[idx], constraints[idx], false))
```

## One NNI move on each constraint

```{julia}
truenet, constraints = loadTrueData("n40h4")
estdists, constraintdists, edgeheights = robustNNI(truenet, constraints, [1, 1, 1, 1], nsim=250)
```

Merged net errors are very closely in line with the sum of induced errors

```{julia}
println(sum(estdists .== sum(constraintdists, dims=1)[1,:]))
prettyNNIErrors(estdists, constraintdists)
```

## Two NNI moves on each constraint

```{julia}
estdists, constraintdists, edgeheights = robustNNI(truenet, constraints, [2, 2, 2, 2], nsim=250)
```

Still tracking closely, but worse

```{julia}
println(mean(estdists .== sum(constraintdists, dims=1)[1,:]))
prettyNNIErrors(estdists, constraintdists)
```

## Three NNI moves on each constraint

```{julia}
estdists, constraintdists, edgeheights = robustNNI(truenet, constraints, [3, 3, 3, 3], nsim=250)
```

This actually seems maybe a bit better than with two NNI moves, relatively speaking

```{julia}
println(sum(estdists .== sum(constraintdists, dims=1)[1,:]))
prettyNNIErrors(estdists, constraintdists)
```

## Varying NNI moves on each constraint

```{julia}
truenet, constraints = loadTrueData("n40h4")

step = 10
total = 500
estdists = Array{Float64}(undef, total)
constraintdists = Array{Float64}(undef, length(constraints), total)
edgeheights = Array{Float64}(undef, length(constraints), total)

for i=1:(total รท step)
    sidx = (i-1)*step+1
    eidx = i*step

    maxval = 3*rand() + 3*rand() + 3*rand()
    nmoves = Int64.(round.(rand(length(constraints)) .* maxval))
    tempdists, tempconstdists, tempheights = robustNNI(truenet, constraints, nmoves, nsim=step)
    
    estdists[sidx:eidx] .= tempdists
    constraintdists[:,sidx:eidx] .= tempconstdists
    edgeheights[:,sidx:eidx] .= tempheights
end
```

```{julia}
prettyNNIErrors(estdists, constraintdists)
```

## TEN NNI moves on each constraint

```{julia}
truenet, constraints = loadTrueData("n40h4")
estdists, constraintdists, edgeheights = robustNNI(truenet, constraints, [10, 10, 10, 10], nsim=100)
```



```{julia}
prettyNNIErrors(estdists, constraintdists)
```