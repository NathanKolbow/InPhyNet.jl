```{julia}
include("../pipelines.jl")
truenet, constraints = loadTrueData("n80h8")
D, _ = majorinternodedistance(truenet)
mean(D[D .!= 0]), std(D[D .!= 0])
```

## Gaussian noise from N(5, 0) (sanity check)

```{julia}
errors = robustGauss(truenet, constraints, μ=5., σ=0., nsim=25)
println(sum(errors .== 0))
histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```

## Gaussian noise from N(1, 1)

```{julia}
errors = robustGauss(truenet, constraints, μ=1., σ=1., nsim=100)
println(sum(errors .== 0))
histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```

## Gaussian noise from N(2, 2)

```{julia}
errors = robustGauss(truenet, constraints, μ=2., σ=2., nsim=100)
println(length(errors))
println(sum(errors .== 0))
histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```

## Gaussian noise from N(4, 4)

```{julia}
errors = robustGauss(truenet, constraints, μ=4., σ=4., nsim=500)
println(length(errors))
println(sum(errors .== 0))
histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```

## Uniform draw from -50% to +50% true value

Has crazy little effect...

```{julia}
errors = robustUniformProportion(truenet, constraints, 0.5)
histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```

## Uniform draw from -75% to +75% true value

```{julia}
errors = robustUniformProportion(truenet, constraints, 0.75)
histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```

## Distance matrix of completely random values

```{julia}
errors = robustRandD(truenet, constraints, nsim=1000)
length(errors)
#histogram(errors, labels=false, xlab="Merging error", ylab="Frequency")
```