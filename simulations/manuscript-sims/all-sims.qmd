```{julia}
include("pipelines.jl")
using Plots, VegaLite
```

```{julia}
# a. Monophyletic partitions
#   i. Ground truth constraints accuracy

#   ii & iii. & iv. NNI & distance noise accuracy
truenet, constraints = loadTrueData("n40h4")
D, namelist = majorinternodedistance(truenet)
esterrors40, gausserrors40, constraintdiffs40 = monophyleticRobustness(truenet, constraints, D, namelist, nsim=2500)
plotMonophyleticRobustness(esterrors40, gausserrors40, constraintdiffs40)

truenet, constraints = loadTrueData("n80h8")
D, namelist = majorinternodedistance(truenet)
esterrors80, gausserrors80, constraintdiffs80 = monophyleticRobustness(truenet, constraints, D, namelist, nsim=2500)
plotMonophyleticRobustness(esterrors80, gausserrors80, constraintdiffs80)

truenet, constraints = loadTrueData("n160h16")
D, namelist = majorinternodedistance(truenet)
esterrors160, gausserrors160, constraintdiffs160 = monophyleticRobustness(truenet, constraints, D, namelist, nsim=2500)
plotMonophyleticRobustness(esterrors160, gausserrors160, constraintdiffs160)

truenet, constraints = loadTrueData("n240h24-unbalanced")
D, namelist = majorinternodedistance(truenet)
esterrors240, gausserrors240, constraintdiffs240 = monophyleticRobustness(truenet, constraints, D, namelist, nsim=2500)
plotMonophyleticRobustness(esterrors240, gausserrors240, constraintdiffs240)

# b. Full random partitions
#   i. Ground truth constraints accuracy

#   ii & iii & iv. NNI & distance noise accuracy

```