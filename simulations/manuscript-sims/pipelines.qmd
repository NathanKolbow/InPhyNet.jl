```{julia}
include("../pipelines.jl")
using Plots, VegaLite
```

```{julia}
# a. Monophyletic partitions
#   i-iv. pipeline files in `condor/pipeline_1i_iv/`
df = CSV.read("../condor/pipeline_1i_iv/pipeline-1i_iv.csv", DataFrame)
for netid in ["n40h4", "n80h8", "n160h16", "n240h24-unbalanced"]
    tempdf = filter(:identifier => ==(netid), df)
    p = plotMonophyleticRobustness(tempdf[!,"merged_est_error"], tempdf[!,"gauss_sd"], tempdf[!,"sum_of_constraint_errors"])
    display(p)
end

#   v.
outfile = "manuscript-sims/swapping-data.csv"
if !isfile(outfile)
    open(outfile, "w+") do f
        write(f, "identifier,merge_error,nswaps\n")
    end
end
nsimperswap = 1000
for netid in ["n40h4", "n80h8", "n160h16", "n240h24-unbalanced"]
    truenet, constraints = loadTrueData("n40h4")
    D, namelist = majorinternodedistance(truenet)
    errors = monophyleticSwappingRobustness(truenet, constraints, D, namelist, 1:10, nsim=nsimperswap)

    CSV.write(outfile, DataFrame(
        "identifier" => repeat([netid], nsimperswap*10),
        "merge_error" => errors,
        "nswaps" => repeat(1:10, inner=nsimperswap)
    ), append=true)
end

boxplot(nswaps, errors, alpha=0.5)
scatter!(nswaps + rand(length(nswaps)) / 5, errors + rand(length(errors)) / 5, alpha=0.1)


# b. Full random partitions
#   i. Ground truth constraints accuracy
outfile = "manuscript-sims/full-random-data.csv"
if !isfile(outfile)
    open(outfile, "w+") do f
        write(f, "identifier,merge_error,constraint_sizes,hybs_est,hybs_true\n")
    end
end

csizes = [
    [8, 9, 7, 16],
    [8, 8, 8, 8, 8],
    [6, 6, 7, 7, 7, 7],
    [5, 5, 5, 5, 6, 6, 8],
    [10, 10, 10, 10],
    [20, 20],
    [15, 15, 10]
]
nbatch = 400
batchsize = 25
truenet, _ = loadTrueData("n40h4")
D, namelist = majorinternodedistance(truenet)
for size in csizes
    for _=1:nbatch
        errors, nhybs = randomPartitionRobustness(truenet, size, D, namelist, nsim=batchsize)

        CSV.write(outfile, DataFrame(
            "identifier" => repeat(["n40h4"], batchsize),
            "merge_error" => errors,
            "constraint_sizes" => repeat([string(size)], batchsize),
            "hybs_est" => nhybs,
            "hybs_true" => repeat([4], batchsize)
        ), append=true)
    end
end
```

```{julia}
df = CSV.read("manuscript-sims/swapping-data.csv", DataFrame)
for id in unique(df[!,"identifier"])
    subdf = filter(:identifier => ==(id), df)
    p = boxplot(
        subdf[!,"nswaps"], subdf[!,"merge_error"],
        xlab="Number of taxa swaps",
        ylab="Merge network estimation error",
        label=nothing,
        title=id
    )
    display(p)
end
```

```{julia}
df = CSV.read("manuscript-sims/full-random-data.csv", DataFrame)
csizes = [
    [8, 9, 7, 16],
    [8, 8, 8, 8, 8],
    [6, 6, 7, 7, 7, 7],
    [5, 5, 5, 5, 6, 6, 8],
    [10, 10, 10, 10],
    [20, 20],
    [15, 15, 10]
]

for csize in csizes
    subdf = filter(:constraint_sizes => ==(string(csize)), df)
    p = boxplot(
        subdf[!,"hybs_est"], subdf[!,"merge_error"],
        xlab="Number of estimated hybrids",
        ylab="Merge error",
        title="Constraint subset sizes: $(string(csize)) - $(size(subdf, 1)) replicates"
    )
    display(p)
end
```